AWSTemplateFormatVersion: '2010-09-09'
Description: BetterHealthServices full infra
  • VPC + public subnets
  • EKS cluster + managed NodeGroup
  • ECR repos for user|messaging|counsellor
  • DynamoDB Users, Messages, Sessions
  • Cognito User Pool + App Client
  • Amplify App + main branch (monorepo)

Parameters:
  SSHKeyName:
    Type: String
    Description: Name of your existing EC2 KeyPair for SSH into nodes
  FrontendRepo:
    Type: String
    Description: HTTPS URL of your GitHub repo
  GitHubTokenSecretArn:
    Type: String
    Description: ARN of a SecretsManager secret holding your GitHub OAuth token under key "token"

Resources:

  ### 1) VPC + Public Subnets ###
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name; 
          Value: betterhealth-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name; 
          Value: betterhealth-igw

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name; 
          Value: betterhealth-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name; 
          Value: betterhealth-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name; 
          Value: betterhealth-subnet-2

  Subnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  Subnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ### 2) IAM Roles for EKS ###
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: betterhealth-eks-cluster-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: eks.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  EKSNodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: betterhealth-eks-node-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  ### 3) EKS Cluster + NodeGroup ###
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: betterhealth-eks
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
        EndpointPublicAccess: true
        EndpointPrivateAccess: false

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: betterhealth-ng
      NodeRole: !GetAtt EKSNodeRole.Arn
      Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
      ScalingConfig:
        MinSize: 2
        DesiredSize: 2
        MaxSize: 4 
      AmiType: AL2_x86_64
      InstanceTypes: [ t3.medium ]

  ### 4) ECR Repositories ###
  UserServiceRepo:
    Type: AWS::ECR::Repository
    Properties: { RepositoryName: user-service }

  MessagingServiceRepo:
    Type: AWS::ECR::Repository
    Properties: { RepositoryName: messaging-service }

  CounsellorServiceRepo:
    Type: AWS::ECR::Repository
    Properties: { RepositoryName: counsellor-service }

  ### 5) DynamoDB Tables ###
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - { AttributeName: user_id, AttributeType: S }
      KeySchema:
        - { AttributeName: user_id, KeyType: HASH }

  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Messages
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - { AttributeName: message_id, AttributeType: S }
      KeySchema:
        - { AttributeName: message_id, KeyType: HASH }

  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Sessions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - { AttributeName: session_id, AttributeType: S }
      KeySchema:
        - { AttributeName: session_id, KeyType: HASH }

  ### 6) Cognito User Pool + App Client ###
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: betterhealth-userpool
      AutoVerifiedAttributes: [ email ]
      UsernameAttributes: [ email ]
      Schema:
        - { Name: email, Required: true, AttributeDataType: String }
        - { Name: name,  Required: true, AttributeDataType: String }
        - { Name: profile_type, Required: false, AttributeDataType: String }
        - { Name: specialization,         Required: false, AttributeDataType: String }

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: betterhealth-frontend-client
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      SupportedIdentityProviders: [ COGNITO ]
      CallbackURLs: [ https://betterhealthservices.42web.io/ ]
      LogoutURLs:   [ https://betterhealthservices.42web.io/ ]
      AllowedOAuthFlows:            [ implicit, code ]
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:           [ email, openid, profile, aws.cognito.signin.user.admin ]
      ExplicitAuthFlows:            [ ALLOW_USER_SRP_AUTH, ALLOW_USER_PASSWORD_AUTH, ALLOW_REFRESH_TOKEN_AUTH,  ]

  ### 7) Amplify App + Branch ###
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: betterhealth-frontend
      Repository: !Ref FrontendRepo
      OauthToken: !Sub '{{resolve:secretsmanager:${GitHubTokenSecretArn}:SecretString:token}}'
      Platform: WEB
      BuildSpec: |
        version: 1
        frontend:
          phases:
            preBuild:
              commands:
                - cd better-wellness-frontend     # enter your front-end subfolder
                - npm ci
            build:
              commands:
                - npm run build
          artifacts:
            baseDirectory: better-wellness-frontend/build
            files:
              - '**/*'
          cache:
            paths:
              - node_modules/**/*
  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: main
      EnableAutoBuild: true

Outputs:
  EKSClusterName: { Description: "EKS cluster name", Value: !Ref EKSCluster }
  EKSClusterEndpoint: { Description: "EKS API endpoint", Value: !GetAtt EKSCluster.Endpoint }
  UserRepo: { Value: !GetAtt UserServiceRepo.RepositoryUri }
  MsgRepo:  { Value: !GetAtt MessagingServiceRepo.RepositoryUri }
  CounsRepo: { Value: !GetAtt CounsellorServiceRepo.RepositoryUri }
  UsersTable: { Value: !Ref UsersTable }
  CognitoPoolId: { Value: !Ref CognitoUserPool }
  CognitoClient: { Value: !Ref CognitoUserPoolClient }
  AmplifyAppId: { Value: !GetAtt AmplifyApp.AppId }
  AmplifyBranch: { Value: !Ref AmplifyBranch }


#1. Create the EKS Cluster

      # 1. Cluster variables
      $CLUSTER    = "better-health-eks2"
      $REGION     = "eu-north-1"
      $SSH_KEY    = "BetterHealthKey"

      # 2. Create a simple 2-node managed cluster with OIDC enabled
      eksctl create cluster `
        --name $CLUSTER `
        --region $REGION `
        --managed `
        --nodes 2 `
        --node-type t3.medium `
        --with-oidc `
        --ssh-access --ssh-public-key $SSH_KEY

      # 3.Once it finishes, confirm:
      kubectl get nodes

#2. Provision DynamoDB Tables

      aws dynamodb create-table `
        --table-name Users `
        --attribute-definitions AttributeName=user_id,AttributeType=S `
        --key-schema AttributeName=user_id,KeyType=HASH `
        --billing-mode PAY_PER_REQUEST `
        --region $REGION

      # Messaging table—if your code writes "message_id"
      aws dynamodb create-table `
        --table-name Messages `
        --attribute-definitions AttributeName=message_id,AttributeType=S `
        --key-schema AttributeName=message_id,KeyType=HASH `
        --billing-mode PAY_PER_REQUEST `
        --region $REGION

      # Sessions table—if your code writes "session_id"
      aws dynamodb create-table `
        --table-name Sessions `
        --attribute-definitions AttributeName=session_id,AttributeType=S `
        --key-schema AttributeName=session_id,KeyType=HASH `
        --billing-mode PAY_PER_REQUEST `
        --region $REGION

      # Verify:

      aws dynamodb list-tables --region $REGION

#3. Create a Cognito User Pool & App Client

    $POOL_ID = aws cognito-idp create-user-pool `
      --pool-name BetterHealthUsers `
      --auto-verified-attributes email `
      --query 'UserPool.Id' --output text --region $REGION

    # 4b. Create a public app client (no secret)
    $CLIENT_ID = aws cognito-idp create-user-pool-client `
      --user-pool-id $POOL_ID `
      --client-name BetterHealthApp `
      --no-generate-secret `
      --query 'UserPoolClient.ClientId' --output text --region $REGION

  #OR Create Manually And

    # 3a. Create User Pool
    $POOL_ID = "eu-north-1_Rxxy1sqje"

    # 3b. Create App Client (no secret, for browser)
    $CLIENT_ID = "3h7k0et1t79tf6ah34bh35givr"

    Write-Host "User Pool ID: $POOL_ID"
    Write-Host "Client ID:   $CLIENT_ID"

#4. Build & Push Your Docker Images to ECR

      $REGION='eu-north-1'
      $ACCOUNT = aws sts get-caller-identity --query Account --output text

      Write-Host "Region: $REGION"
      Write-Host "Account:   $ACCOUNT"

      @('user-service','messaging-service','counsellor-service') | %{
          aws ecr create-repository --repository-name $_ --region $REGION --output text
      }

      aws ecr get-login-password --region $REGION |
      docker login --username AWS --password-stdin "$ACCOUNT.dkr.ecr.$REGION.amazonaws.com"

      docker build -t user-service:latest .\user-service
      docker tag user-service:latest "$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/user-service:latest"
      docker push "$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/user-service:latest"


      docker build -t messaging-service:latest .\messaging-service
      docker tag messaging-service:latest "$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/messaging-service:latest"
      docker push "$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/messaging-service:latest"


      docker build -t counsellor-service:latest .\counsellor-service
      docker tag counsellor-service:latest "$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/counsellor-service:latest"
      docker push "$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/counsellor-service:latest"

#5. Deploy Backend to Kubernetes

      kubectl apply -f backend.yaml
      kubectl rollout status deploy/user-service
      kubectl rollout status deploy/messaging-service
      kubectl rollout status deploy/counsellor-service

#6. Install the NGINX Ingress Controller

      helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      helm repo update

      helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx `
        --namespace ingress-nginx --create-namespace `
        --set controller.replicaCount=2 `
        --set controller.service.type=LoadBalancer

      #Wait for the External IP/DNS:

      kubectl -n ingress-nginx get svc ingress-nginx-controller

        #Note the EXTERNAL-IP (e.g. a1b2c3d4e5f6g7-123456789.eu-north-1.elb.amazonaws.com). and CHange the host file
        #nslookup user.betterhealthservices.42web.io 8.8.8.8

#7. Generate & Install a Self-Signed Certificate(on Cert Folder)

      openssl req -x509 -nodes -days 365 `
        -newkey rsa:2048 `
        -keyout tls.key `
        -out tls.crt `
        -subj "/CN=*.$DOMAIN/O=BetterHealth" `
        -addext "subjectAltName=DNS:$DOMAIN,DNS:user.$DOMAIN,DNS:messaging.$DOMAIN,DNS:counsellor.$DOMAIN"


      kubectl create secret tls tls-selfsigned `
        --namespace default `
        --key certs/tls.key `
        --cert certs/tls.crt

#8. Create Your Ingress

      kubectl apply -f ingress.yaml
      kubectl describe ingress backend-ingress

#9. Point Your DNS

  #In your DNS provider, create CNAME records

#10. Deploy & Host Your Frontend with Amplify

#11. Validation & Testing

      curl.exe https://user.betterhealthservices.42web.io/health -k
      curl.exe https://messaging.betterhealthservices.42web.io/health -k
      curl.exe https://counsellor.betterhealthservices.42web.io/health -k

#12. Give your worker nodes permission

      aws iam list-roles `
        --query "Roles[?contains(RoleName,'NodeInstanceRole')].RoleName" `
        --output text

      #Let’s assume it returns:
      eksctl-better-health-eks2-nodegrou-NodeInstanceRole-6AJRg26lMWCA

      #2) Attach AWS-managed policies (quick & broad)
      $NODE_ROLE = aws iam list-roles `
        --query "Roles[?contains(RoleName, 'NodeInstanceRole')].RoleName | [0]" `
        --output text --region $REGION

      #OR Do it Manually

      $NODE_ROLE = "eksctl-better-health-eks2-nodegrou-NodeInstanceRole-6AJRg26lMWCA"

        aws iam attach-role-policy `
          --role-name $NODE_ROLE `
          --policy-arn arn:aws:iam::aws:policy/AmazonCognitoReadOnly

        aws iam attach-role-policy `
          --role-name $NODE_ROLE `
          --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

#13. Smoke-test everything

      $DOMAIN = "betterhealthservices.42web.io"

      curl.exe -k https://user.$DOMAIN/health
      curl.exe -k https://messaging.$DOMAIN/health
      curl.exe -k https://counsellor.$DOMAIN/health


#14. Cleanup

eksctl delete cluster better-health-eks-cluster      # removes EKS & nodegroup
aws ecr delete-repository --repository-name user-service --force
aws ecr delete-repository --repository-name messaging-service --force
aws ecr delete-repository --repository-name counsellor-service --force
aws dynamodb delete-table --table-name Users
aws dynamodb delete-table --table-name Messages
aws dynamodb delete-table --table-name Sessions
aws cognito-idp delete-user-pool --user-pool-id <POOL_ID>
amplify delete app --app-id <AMPLIFY_APP_ID>          # or via console